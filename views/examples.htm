<h2>Examples</h2>
<p>Working with abaaso is different than most JavaScript frameworks, it does away with the MVC paradigm in favor of an Object Oriented Programming (OOP) approach, consuming data from APIs (SOA or Service Oriented Architecture), with a focus on REST (Representational State Transfer).</p>
<o>Sounds complicated right? I'm glad to say it's not. The majority of the work is done automatically for you, including full CORS support with an automatic fallback to JSONP.</p>
<p>You'll notice the steps to consume any API are the same. Sometimes a data store will need one or more optional properties set, but that's as complicated as it gets.</p>
<p>All examples require valid API keys to function. Variables start with ":", e.g. ":user".</p>

<h4>Klout: Score in a DIV</h4>
<pre>
$.create("div").jsonp("http://api.klout.com/1/klout.json?users=:user&key=:key&callback=?", "users[0].kscore");
</pre>

<h4>Twitter: Latest tweet in a DIV</h4>
<pre>
$.create("div").jsonp("http://search.twitter.com/search.json?callback=?&from=:user", "results[0].text");
</pre>

<h4>Twitter: Data store</h4>
<pre>
var twitter = {id: "twitter"},
    uri = "http://search.twitter.com/:api?callback=?:queries";

// Creating the store
$.store(twitter);
twitter.data.key = "id";

// Set the sync listener
twitter.on("afterDataSync", function() {
	this.get().each(function(r) {
		// Do something with r
	});
}, "sync", twitter.data);

// Making the store RESTful
typeof twitter.data.setUri === "function" ? twitter.data.setUri(uri) : twitter.data.uri = uri;
</pre>

<h4>Tumblr: Data store</h4>
<pre>
var tumblr = {id: "tumblr"},
    uri = "http://api.tumblr.com/v2/blog/:blog/posts?api_key=:key&limit=1000000&jsonp=?";

// Creating the store
$.store(tumblr);
tumblr.data.key      = "id";
tumblr.data.callback = "jsonp";
tumblr.data.source   = "response";

// Set the sync listener
tumblr.on("afterDataSync", function() {
	this.get().each(function(r) {
		// Do something with r
	});
}, "sync", tumblr.data);

// Making the store RESTful
typeof tumblr.data.setUri === "function" ? tumblr.data.setUri(uri) : tumblr.data.uri = uri;
</pre>

<h4>Github: Collaborators data store</h4>
<pre>
var collabs = {id: "collabs"},
    uri = "https://api.github.com/repos/:user/:repo/collaborators?callback=?";

// Creating the store
$.store(collabs);
collabs.data.source = "data";
collabs.data.key    = "id";

// Set the sync listener
collabs.on("afterDataSync", function() {
	this.get().each(function(r) {
		// Do something with r
	});
}, "sync", collabs.data);

// Making the store RESTful
typeof collabs.data.setUri === "function" ? collabs.data.setUri(uri) : collabs.data.uri = uri;
</pre>
